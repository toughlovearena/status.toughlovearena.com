{"version":3,"sources":["comp/shared.tsx","util.ts","asyncQueue.ts","resolvable.ts","cron.ts","comp/Poll.tsx","comp/StatusTable.tsx","comp/Version.tsx","comp/News.tsx","comp/ActivePlayers.tsx","chart.ts","queueTimes.ts","comp/RankedQueueTimes.tsx","comp/CasualQueueTimes.tsx","comp/App.tsx","reportWebVitals.ts","index.tsx"],"names":["MainContainer","styled","div","DataContainer","DataSection","SectionTitle","DataTable","table","isLongPoll","URLSearchParams","window","location","search","get","fetchNoCache","url","fetch","Date","getTime","QUEUE","threads","count","queue","this","Math","max","cb","id","item","resolveCallback","rejectCallback","resolved","errored","promise","Promise","resolve","reject","value","reason","hasResolved","hasErrored","resolvable","process","a","then","out","catch","err","finally","dequeue","prevIndex","length","prevResolve","console","log","push","filter","elm","queueFetch","enqueue","chunk","arr","chunkSize","results","start","slice","CRON","PERIOD","callbacks","setInterval","step","Object","values","forEach","key","undefined","unregister","PollLink","props","isUp","Poll","label","report","useState","setIsUp","pingMs","setPingMs","checkIsUp","useCallback","before","performance","now","ok","Error","after","round","useEffect","register","href","polls","StatusLabel","records","StatusTable","allUp","setAllUp","reportPoll","success","every","b","map","pd","pi","Version","version","setVersion","fetchVersion","response","json","data","v","News","news","setNews","fetchNews","message","newsCopy","dangerouslySetInnerHTML","__html","ActivePlayers","counts","setCounts","fetchCounts","total","reduce","c","sum","renderCount","ChartRef","args","chart","canvasElm","colorRGB","ctx","getContext","Chart","BarController","BarElement","CategoryScale","LinearScale","myChart","type","labels","datasets","backgroundColor","r","g","borderColor","borderWidth","options","plugins","legend","display","responsive","maintainAspectRatio","scales","x","title","text","color","ticks","y","beginAtZero","QUEUE_TIMES","casual","ranked","cr","queueTimes","lookup","latestDate","keys","sort","pop","queueDate","seconds","parseFloat","split","toString","dataSet","sumCount","average","allLabels","i","range","d","allValues","concat","curr","queues","servers","prod","s","ref","q","graphData","convertQueueTimesToData","ds","lab","val","update","setAverage","RankedQueueTimes","canvasRef","useRef","current","registerRanked","CasualQueueTimes","registerCasual","Header","Logo","img","Footer","App","updated","setUpdated","isSimpleView","src","alt","toLocaleTimeString","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","refreshPeriod","reload"],"mappings":"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","file":"static/js/main.5b1efd67.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const MainContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n\n  padding: 2rem 1rem;\n  box-sizing: border-box;\n  max-width: 800px;\n\n  @media (min-width: 800px) {\n    max-width: 1200px;\n  }\n`;\n\nexport const DataContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n\n  @media (min-width: 800px) {\n    flex-direction: row;\n    justify-content: center;\n    align-items: flex-start;\n    flex-wrap: wrap;\n  }\n`;\n\nexport const DataSection = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: center;\n  flex-wrap: nowrap;\n\n  @media (min-width: 800px) {\n    width: 500px;\n  }\n`;\n\nexport const SectionTitle = styled.div`\n  font-size: 1.5em;\n  margin: 1em 0;\n  margin-bottom: 0.5em;\n`;\n\nexport const DataTable = styled.table`\n  font-size: 1rem;\n  border-collapse: collapse;\n\n  th,\n  td {\n    text-align: center;\n    border: 1px solid grey;\n    padding: 0.5em 1em;\n    background-color: rgb(60, 60, 60);\n  }\n\n  th {\n    background-color: inherit;\n  }\n`;\n","import { AsyncQueue } from \"./asyncQueue\";\n\nexport function isLongPoll() {\n  return !!(new URLSearchParams(window.location.search).get('long'));\n}\n\nexport function isSimple() {\n  return !!(new URLSearchParams(window.location.search).get('simple'));\n}\n\nexport function fetchNoCache(url: string): Promise<Response> {\n  return fetch(url + '?cache=' + new Date().getTime());\n}\nexport const QUEUE = new AsyncQueue();\nexport function queueFetch(url: string): Promise<Response> {\n  return QUEUE.enqueue(() => fetchNoCache(url)).promise;\n}\n\nexport function range(length: number): number[] {\n  const out = [] as number[];\n  for (let i = 0; i < length; i++) {\n    out.push(i);\n  }\n  return out;\n}\n\nexport function chunk<T>(arr: T[], chunkSize: number): T[][] {\n  const results = [];\n  let start = 0;\n  while (start < arr.length) {\n    results.push(arr.slice(start, start + chunkSize));\n    start += chunkSize;\n  }\n  return results;\n}\n","import { resolvable, Resolvable } from \"./resolvable\";\n\nexport class AsyncQueue {\n  private readonly threads;\n  private count = 0;\n  private queue: {\n    id: number;\n    resolvable: Resolvable<any>;\n  }[] = [];\n\n  constructor(threads?: number) {\n    this.threads = Math.max(1, threads ?? 3);\n  }\n\n  enqueue<T>(cb: () => Promise<T>): Resolvable<T> {\n    const id = this.count++;\n    const item = resolvable<T>();\n    const process = async () => cb()\n      .then(out => item.resolve(out))\n      .catch(err => item.resolve(err))\n      .finally(() => this.dequeue(id));\n\n    const prevIndex = this.queue.length - this.threads;\n    const prevResolve = this.queue[prevIndex];\n    const prevPromise = prevResolve?.resolvable.promise ?? Promise.resolve();\n    prevPromise\n      .catch(console.log)\n      .finally(process);\n\n    this.queue.push({\n      id,\n      resolvable: item,\n    });\n    return item;\n  }\n\n  private dequeue(id: number) {\n    this.queue = this.queue.filter(elm => elm.id !== id);\n  }\n\n}\n","export interface Resolvable<T> {\n  promise: Promise<T>;\n  resolve: (value: T) => void;\n  reject: (reason?: any) => void;\n  hasResolved(): boolean;\n  hasErrored(): boolean;\n}\nexport function resolvable<T>(): Resolvable<T> {\n  let resolveCallback: (value: T) => void = () => { };\n  let rejectCallback: (reason?: any) => void = () => { };\n  let resolved = false;\n  let errored = false;\n  const promise = new Promise<T>((resolve, reject) => {\n    resolveCallback = value => {\n      resolved = true;\n      resolve(value);\n    };\n    rejectCallback = reason => {\n      errored = true;\n      reject(reason);\n    };\n  });\n  return {\n    promise,\n    resolve: resolveCallback,\n    reject: rejectCallback,\n    hasResolved: () => resolved,\n    hasErrored: () => errored,\n  }\n}\n","import { isLongPoll } from \"./util\";\n\ninterface IntervalCallback {\n  (): void;\n}\n\nclass CronSingleton {\n  private readonly PERIOD = (isLongPoll() ? 300 : 30) * 1000;\n  private readonly callbacks: Record<string, IntervalCallback | undefined> = {};\n  constructor() {\n    setInterval(() => this.step(), this.PERIOD);\n  }\n\n  private step() {\n    Object.values(this.callbacks).forEach(cb => cb && cb());\n  }\n\n  register(key: string, cb: IntervalCallback) {\n    const existing = this.callbacks[key];\n    if (existing !== undefined) {\n      // do nothing\n    } else {\n      cb();\n    }\n    this.callbacks[key] = cb;\n    return () => this.unregister(key);\n  }\n  private unregister(key: string) {\n    this.callbacks[key] = () => { };\n  }\n}\n\nexport const CRON = new CronSingleton();\n","import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { CRON } from '../cron';\nimport { fetchNoCache, QUEUE } from '../util';\n\nconst PollLink = styled.a<{ isUp: boolean }>`\n  color: ${props => props.isUp ? 'lightgreen' : 'salmon'};\n  text-decoration: none;\n`;\n\nexport function Poll(props: {\n  label: string;\n  url: string;\n  report(ok: boolean): void;\n}) {\n  const {\n    label,\n    url,\n    report,\n  } = props;\n\n  const [isUp, setIsUp] = useState(undefined as boolean | undefined);\n  const [pingMs, setPingMs] = useState(undefined as number | undefined);\n\n  const checkIsUp = useCallback(() => {\n    QUEUE.enqueue(async () => {\n      const before = performance.now();\n      try {\n        const response = await fetchNoCache(url);\n        if (!response.ok) {\n          throw new Error('fetch failed: ' + url);\n        }\n        setIsUp(true);\n        report(true);\n      } catch (err) {\n        setIsUp(false);\n        report(false);\n      }\n      const after = performance.now();\n      setPingMs(Math.round(after - before));\n    });\n  }, [url, report, setIsUp, setPingMs]);\n  useEffect(() => CRON.register(`poll-${label}`, () => checkIsUp()), [label, checkIsUp]);\n\n  return (\n    <tr>\n      <td>{label}</td>\n      <td>\n        {isUp === undefined ? '???' : (\n          <PollLink href={url} isUp={isUp}>\n            {isUp ? 'OK' : 'DOWN'}\n          </PollLink>\n        )}\n      </td>\n      <td>\n        {pingMs ?? '???'}\n      </td>\n    </tr>\n  );\n}\n","import React, { useCallback, useState } from 'react';\nimport { Poll } from './Poll';\nimport styled from 'styled-components';\nimport { DataSection, DataTable, SectionTitle } from './shared';\n\nconst polls = [{\n  label: 'toughlovearena.com',\n  url: 'https://toughlovearena.com/version.json',\n}, {\n  label: 'api.tla',\n  url: 'https://api.toughlovearena.com/health',\n}, {\n  label: 'cache.tla',\n  url: 'https://cache.toughlovearena.com/health',\n}, {\n  label: 'handshake.tla',\n  url: 'https://handshake.toughlovearena.com/health',\n}, {\n  label: 'leaderboard.tla',\n  url: 'https://leaderboard.toughlovearena.com/health',\n}, {\n  label: 'matchmaker.tla',\n  url: 'https://matchmaker.toughlovearena.com',\n}, {\n  label: 'presence.tla',\n  url: 'https://presence.toughlovearena.com/health',\n}, {\n  label: 'lobbya.tla',\n  url: 'https://lobbya.toughlovearena.com/health',\n}, {\n  label: 'lobbyb.tla',\n  url: 'https://lobbyb.toughlovearena.com/health',\n}, {\n  label: 'ice.tla',\n  url: 'https://ice.toughlovearena.com/health',\n}];\n\nconst StatusLabel = styled.a<{ isUp: boolean }>`\n  color: ${props => props.isUp ? 'lightgreen' : 'salmon'};\n`;\n\n// todo not sure where to put this w/ hooks\nconst records: Record<string, boolean> = {};\n\nexport function StatusTable() {\n  const [allUp, setAllUp] = useState(undefined as boolean | undefined);\n\n  const reportPoll = useCallback((url: string, success: boolean) => {\n    records[url] = success;\n    setAllUp(Object.values(records).every(b => b));\n  }, [setAllUp]);\n\n  return (\n    <DataSection>\n      <SectionTitle>\n        Status: {allUp === undefined ? '???' : (\n          <StatusLabel isUp={allUp}>\n            {allUp ? 'OK' : 'DOWN'}\n          </StatusLabel>\n        )}\n      </SectionTitle>\n      <DataTable>\n        <thead>\n          <tr>\n            <th>Service</th>\n            <th>Status</th>\n            <th>ms</th>\n          </tr>\n        </thead>\n        <tbody>\n          {polls.map((pd, pi) => (\n            <Poll\n              key={pi}\n              report={ok => reportPoll(pd.url, ok)}\n              {...pd}\n            />\n          ))}\n        </tbody>\n      </DataTable>\n    </DataSection>\n  )\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { CRON } from '../cron';\nimport { queueFetch } from '../util';\n\nexport function Version() {\n  const [version, setVersion] = useState(undefined as string | undefined);\n\n  const fetchVersion = useCallback(async () => {\n    const response = await queueFetch('https://toughlovearena.com/version.json');\n    const data = await response.json() as { v: string, u: string, };\n    setVersion(data.v);\n  }, [setVersion]);\n  useEffect(() => CRON.register('version', () => fetchVersion()), [fetchVersion]);\n\n  return (\n    <div>\n      <a href='https://toughlovearena.com?changelog'>\n        v{version ?? '???'}\n      </a>\n    </div>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { CRON } from '../cron';\nimport { queueFetch } from '../util';\n\nexport function News() {\n  const [news, setNews] = useState(undefined as string | undefined);\n\n  const fetchNews = useCallback(async () => {\n    const response = await queueFetch('https://us-central1-fighter-api.cloudfunctions.net/webApi/api/v1/news');\n    const data = await response.json() as { message: string, };\n    setNews(data.message);\n  }, [setNews]);\n  useEffect(() => CRON.register('news', () => fetchNews()), [fetchNews]);\n\n  const newsCopy = (\n    (news === undefined && '???') ||\n    news ||\n    '<i>no news</i>'\n  );\n  return (\n    <div>\n      News: <span dangerouslySetInnerHTML={{ __html: newsCopy, }} />\n    </div>\n  );\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { CRON } from '../cron';\nimport { DataSection, SectionTitle, DataTable } from './shared';\nimport { queueFetch } from '../util';\n\nexport function ActivePlayers() {\n  const [counts, setCounts] = useState(undefined as Record<string, number> | undefined);\n\n  const fetchCounts = useCallback(async () => {\n    const response = await queueFetch('https://presence.toughlovearena.com');\n    const counts = await response.json() as Record<string, number>;\n    setCounts(counts);\n  }, [setCounts]);\n  useEffect(() => CRON.register('activePlayers', () => fetchCounts()), [fetchCounts]);\n\n  const total = counts ? Object.values(counts).reduce((c, sum) => sum + c, 0) : '???';\n  const renderCount = (key: string) => (counts && counts[key]) ?? '?';\n\n  return (\n    <DataSection>\n      <SectionTitle>\n        Active Players: {total}\n      </SectionTitle>\n      <DataTable>\n        <thead>\n          <tr>\n            <th>Game Mode</th>\n            <th>#</th>\n            <th>Game Mode</th>\n            <th>#</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td>Welcome</td>\n            <td>{renderCount('welcome')}</td>\n            <td>Menu</td>\n            <td>{renderCount('menu')}</td>\n          </tr>\n          <tr>\n            <td>How to Play</td>\n            <td>{renderCount('how_to_play')}</td>\n            <td>Ranked Match</td>\n            <td>{renderCount('online_ranked')}</td>\n          </tr>\n          <tr>\n            <td>Local Versus</td>\n            <td>{renderCount('vs_local')}</td>\n            <td>Casual Match</td>\n            <td>{renderCount('online_casual')}</td>\n          </tr>\n          <tr>\n            <td>Versus CPU</td>\n            <td>{renderCount('vs_cpu')}</td>\n            <td>Private Match</td>\n            <td>{renderCount('online_private')}</td>\n          </tr>\n          <tr>\n            <td>Boss Fight</td>\n            <td>{renderCount('vs_boss')}</td>\n            <td>Private Lobby</td>\n            <td>{renderCount('online_lobby')}</td>\n          </tr>\n          <tr>\n            <td>Training</td>\n            <td>{renderCount('training')}</td>\n            <td>Account Login</td>\n            <td>{renderCount('online_account')}</td>\n          </tr>\n          <tr>\n            <td>Frame Data</td>\n            <td>{renderCount('frame_data')}</td>\n            <td>Account Stats</td>\n            <td>{renderCount('online_stats')}</td>\n          </tr>\n          <tr>\n            <td>Debug Ref</td>\n            <td>{renderCount('debug_ref')}</td>\n            <td>Leaderboard</td>\n            <td>{renderCount('online_leaderboard')}</td>\n          </tr>\n          <tr>\n            <td>About</td>\n            <td>{renderCount('about')}</td>\n            <td>Hall of Fame</td>\n            <td>{renderCount('hall_of_fame')}</td>\n          </tr>\n          <tr>\n            <td>Modding</td>\n            <td>{renderCount('modding')}</td>\n            <td>Replay</td>\n            <td>{renderCount('replay')}</td>\n          </tr>\n        </tbody>\n      </DataTable>\n    </DataSection>\n  );\n}\n","import { BarController, BarElement, CategoryScale, Chart, ChartType, LinearScale } from 'chart.js';\n\nexport class ChartRef {\n  readonly chart: Chart;\n  constructor(args: {\n    canvasElm: HTMLCanvasElement;\n    label: string;\n    colorRGB: { r: number, g: number, b: number },\n  }) {\n    const {\n      canvasElm,\n      label,\n      colorRGB,\n    } = args;\n    const ctx = canvasElm.getContext('2d')!;\n    Chart.register(BarController, BarElement, CategoryScale, LinearScale);\n    const myChart = new Chart(ctx, {\n      type: 'bar' as ChartType,\n      data: {\n        labels: [],\n        datasets: [{\n          label: label,\n          data: [],\n          backgroundColor: `rgba(${colorRGB.r}, ${colorRGB.g}, ${colorRGB.b}, 0.2)`,\n          borderColor: `rgba(${colorRGB.r}, ${colorRGB.g}, ${colorRGB.b}, 1)`,\n          borderWidth: 1\n        }]\n      },\n      options: {\n        plugins: {\n          legend: {\n            display: false,\n          },\n        },\n        responsive: true,\n        maintainAspectRatio: true,\n        scales: {\n          x: {\n            title: {\n              display: true,\n              text: 'seconds waiting for match',\n              color: 'white',\n            },\n            ticks: {\n              color: 'white',\n            },\n          },\n          y: {\n            beginAtZero: true,\n            title: {\n              display: true,\n              text: 'matches',\n              color: 'white',\n            },\n            ticks: {\n              color: 'white',\n            },\n          },\n        },\n      }\n    });\n    this.chart = myChart;\n  }\n}\n","import { ChartRef } from './chart';\nimport { CRON } from './cron';\nimport { chunk, queueFetch, range } from './util';\n\ntype QueueTimes = Record<string, Record<string, number>>;\ntype QueueData = {\n  counter: number;\n  searching: string[];\n  queueTimes: QueueTimes;\n}\ntype ServerData = {\n  label: string;\n  path: string;\n  casual: QueueData;\n  ranked: QueueData;\n}\ntype QueueRef = {\n  chart: ChartRef;\n  setAverage(average: number | undefined): void;\n}\n\nclass QueueTimesSingleton {\n  private casual: QueueRef | undefined;\n  private ranked: QueueRef | undefined;\n  constructor() {\n    CRON.register('chart', () => this.step());\n  }\n\n  registerCasual(cr: QueueRef) {\n    this.casual = cr;\n    this.step();\n  }\n  registerRanked(cr: QueueRef) {\n    this.ranked = cr;\n    this.step();\n  }\n\n  private convertQueueTimesToData(queueTimes: QueueTimes) {\n    console.log(queueTimes);\n    const lookup: Record<string, number> = {};\n    const latestDate = Object.keys(queueTimes).sort().pop();\n    if (!latestDate) { return; }\n\n    const queueDate = queueTimes[latestDate];\n    for (const key in queueDate) {\n      const seconds = parseFloat(key.split('s')[0]);\n      const count = queueDate[key];\n      lookup[seconds.toString()] = (lookup[seconds.toString()] || 0) + count;\n    }\n    const dataSet = [];\n    let sum = 0;\n    let sumCount = 0;\n    for (const key in lookup) {\n      const seconds = parseFloat(key);\n      const count = lookup[key];\n      dataSet.push({ seconds, count, });\n      sum += seconds * count;\n      sumCount += count;\n    }\n    const average = sum / sumCount;\n    const highest = Math.max(...dataSet.map(d => d.seconds));\n    const allLabels = range(highest + 1);\n    const allValues = allLabels.map(i => lookup[i.toString()] || 0);\n    const labels = chunk(allLabels, 5).map(c => `${c[0]} - ${c.concat().pop()}`);\n    const values = chunk(allValues, 5).map(c => c.reduce((sum, curr) => sum + curr, 0));\n    return { labels, values, average };\n  }\n  private async step() {\n    const queues: { queueTimes: QueueTimes, ref: QueueRef }[] = [];\n    try {\n      const response = await queueFetch('https://matchmaker.toughlovearena.com/details');\n      const servers = await response.json() as ServerData[];\n      const prod = servers.filter(s => s.label === 'prod')[0];\n      if (this.casual) {\n        queues.push({\n          queueTimes: prod.casual.queueTimes,\n          ref: this.casual,\n        });\n      }\n      if (this.ranked) {\n        queues.push({\n          queueTimes: prod.ranked.queueTimes,\n          ref: this.ranked,\n        });\n      }\n      queues.forEach(q => {\n        const graphData = this.convertQueueTimesToData(q.queueTimes);\n        if (!graphData) { return; }\n\n        while (q.ref.chart.chart.data.labels?.length) {\n          q.ref.chart.chart.data.labels.pop();\n        }\n        q.ref.chart.chart.data.datasets.forEach(ds => {\n          while (ds.data.length) {\n            ds.data.pop();\n          }\n        });\n        graphData.labels.forEach(lab => q.ref.chart.chart.data.labels!.push(lab));\n        graphData.values.forEach(val => q.ref.chart.chart.data.datasets.forEach(ds => ds.data.push(val)));\n        q.ref.chart.chart.update();\n        q.ref.setAverage(Math.round(graphData.average));\n      });\n    } catch (err) {\n      console.log(err);\n      queues.forEach(q => {\n        q.ref.setAverage(undefined);\n      });\n    }\n  }\n}\n\nexport const QUEUE_TIMES = new QueueTimesSingleton();\n","import React, { useEffect, useRef, useState } from 'react';\nimport { ChartRef } from '../chart';\nimport { QUEUE_TIMES } from '../queueTimes';\nimport { DataSection, SectionTitle } from './shared';\n\nexport function RankedQueueTimes() {\n  const canvasRef = useRef(null as HTMLCanvasElement | null);\n  const [average, setAverage] = useState(undefined as number | undefined);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const chart = new ChartRef({\n        canvasElm: canvasRef.current,\n        label: 'Ranked Queue Time',\n        colorRGB: { r: 162, g: 100, b: 235, },\n      });\n      QUEUE_TIMES.registerRanked({ chart, setAverage });\n    }\n  }, [canvasRef, setAverage]);\n\n  return (\n    <DataSection>\n      <SectionTitle>\n        Ranked Queue Time: {average ?? '???'} seconds\n      </SectionTitle>\n      <canvas ref={canvasRef} />\n    </DataSection>\n  );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport { ChartRef } from '../chart';\nimport { QUEUE_TIMES } from '../queueTimes';\nimport { DataSection, SectionTitle } from './shared';\n\nexport function CasualQueueTimes() {\n  const canvasRef = useRef(null as HTMLCanvasElement | null);\n  const [average, setAverage] = useState(undefined as number | undefined);\n\n  useEffect(() => {\n    if (canvasRef.current) {\n      const chart = new ChartRef({\n        canvasElm: canvasRef.current,\n        label: 'Casual Queue Time',\n        colorRGB: { r: 54, g: 162, b: 235, },\n      });\n      QUEUE_TIMES.registerCasual({ chart, setAverage });\n    }\n  }, [canvasRef, setAverage]);\n\n  return (\n    <DataSection>\n      <SectionTitle>\n        Casual Queue Time: {average ?? '???'} seconds\n      </SectionTitle>\n      <canvas ref={canvasRef} />\n    </DataSection>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport { MainContainer, DataContainer } from './shared';\nimport { StatusTable } from './StatusTable';\nimport { Version } from './Version';\nimport { News } from './News';\nimport { ActivePlayers } from './ActivePlayers';\nimport { RankedQueueTimes } from './RankedQueueTimes';\nimport { CasualQueueTimes } from './CasualQueueTimes';\nimport { CRON } from '../cron';\nimport { isSimple } from '../util';\n\nconst Header = styled.div`\n  padding-bottom: 0.5rem;\n  border-bottom: 1px solid white;\n`;\nconst Logo = styled.img`\n  display: block;\n  width: 100%;\n  max-width: 600px;\n  height: auto;\n  margin: auto;\n`;\nconst Footer = styled.div`\n  margin-top: 1rem;\n  padding-top: 0.5rem;\n  border-top: 1px solid white;\n`;\n\nexport function App() {\n  const [updated, setUpdated] = useState(undefined as Date | undefined);\n  useEffect(() => CRON.register('updated', () => setUpdated(new Date())), [setUpdated]);\n\n  const isSimpleView = isSimple();\n  return (\n    <MainContainer>\n      <Header>\n        <Logo src=\"logo.png\" alt=\"logo\" />\n        <div>Tough Love Arena Status Page</div>\n        <Version />\n        <News />\n      </Header>\n\n      <DataContainer>\n        <StatusTable />\n        <ActivePlayers />\n        {!isSimpleView && <RankedQueueTimes />}\n        {!isSimpleView && <CasualQueueTimes />}\n      </DataContainer>\n\n      <Footer>\n        Updates every 30 seconds\n        <br />\n        Last updated @ {updated?.toLocaleTimeString() ?? '???'}\n        <br />\n        If anything is down, please email <a href=\"mailto:toughlovearena@gmail.com\">toughlovearena@gmail.com</a>\n      </Footer>\n    </MainContainer>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './comp';\nimport reportWebVitals from './reportWebVitals';\nimport { isLongPoll } from './util';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// hard refresh every 5 mins\nconst refreshPeriod = (isLongPoll() ? 60 : 5) * 60 * 1000;\nsetInterval(() => window.location.reload(false), refreshPeriod);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}